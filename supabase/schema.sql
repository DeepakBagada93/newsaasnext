-- supabase/schema.sql

-- First, create the custom type for project status.
create type project_status as enum ('Planning', 'In Progress', 'On Hold', 'Completed', 'Archived');


-- Create the 'clients' table to store client-specific information, including login credentials.
create table clients (
  id uuid default gen_random_uuid() primary key,
  name text not null,
  company text,
  email text unique not null,
  username text unique not null,
  password_hash text not null, -- Stores the hashed password for security.
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Add Row Level Security to the 'clients' table.
alter table clients enable row level security;
-- Admins should be able to manage all client records. 
-- This policy assumes an 'admin' role exists in your custom authentication system or Supabase Auth roles.
-- For this project, we'll allow broader access from the server, secured by server-side code.
create policy "Admins can manage clients" on clients for all using (true);


-- Create the 'projects' table to store project details.
create table projects (
  id uuid default gen_random_uuid() primary key,
  client_id uuid references public.clients on delete cascade not null, -- Foreign key to the new 'clients' table.
  name text not null,
  status project_status default 'Planning' not null,
  progress integer default 0 check (progress >= 0 and progress <= 100),
  deadline date,
  total_budget numeric(10, 2),
  paid numeric(10, 2),
  timeline jsonb,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Add Row Level Security to the 'projects' table.
alter table projects enable row level security;
-- Admins can manage all projects.
create policy "Admins can manage all projects" on projects for all using (true);
-- Clients should only be able to view projects linked to their client_id.
create policy "Clients can view their own projects" on projects for select using (auth.uid() = client_id); -- This will be adapted in middleware to check custom JWT.

-- DEMO DATA
-- Note: You must first create a client in the 'clients' table.
-- Then, replace the placeholder client_id '...' in the INSERT statements below with the actual UUID of the client you created.

-- Example:
-- 1. Run the table creation scripts above.
-- 2. Manually (or via your app's admin UI) insert a client into the 'clients' table.
-- 3. Get the 'id' of that new client.
-- 4. Replace 'your-client-uuid-here' with the actual ID.
-- 5. Run the INSERT statements below.

-- INSERT INTO projects (client_id, name, status, progress, deadline, total_budget, paid, timeline)
-- VALUES
--   ('your-client-uuid-here', 'E-commerce Platform Launch', 'In Progress', 60, '2024-09-30', 25000.00, 15000.00,
--    '[
--       {"event": "Project Kick-off & Discovery", "date": "2024-06-01", "completed": true},
--       {"event": "Design & Prototyping", "date": "2024-06-20", "completed": true},
--       {"event": "Frontend Development", "date": "2024-07-15", "completed": true},
--       {"event": "Backend & API Integration", "date": "2024-08-10", "completed": false},
--       {"event": "Deployment to Staging", "date": "2024-08-25", "completed": false},
--       {"event": "Final UAT & Testing", "date": "2024-09-15", "completed": false},
--       {"event": "Go-Live", "date": "2024-09-30", "completed": false}
--     ]'
--   ),
--   ('your-client-uuid-here', 'Q3 Lead Generation Campaign', 'In Progress', 25, '2024-09-30', 5000.00, 2000.00,
--    '[
--       {"event": "Strategy & Audience Definition", "date": "2024-07-01", "completed": true},
--       {"event": "Ad Creative & Copy Development", "date": "2024-07-10", "completed": true},
--       {"event": "Campaigns Live on Google & Meta", "date": "2024-07-15", "completed": false},
--       {"event": "Mid-Campaign Review & Optimization", "date": "2024-08-15", "completed": false},
--       {"event": "Final Performance Report", "date": "2024-10-05", "completed": false}
--     ]'
--   );

-- To set up Supabase Auth for admins (optional, but recommended):
-- The following policies assume you are using Supabase's built-in authentication for admins.
-- You would typically have a way to assign an 'admin' role to users.
-- For example, using a 'user_roles' table.

-- create table user_roles (
--   id        bigint generated by default as identity primary key,
--   user_id   uuid references auth.users on delete cascade not null,
--   role      text check (role in ('admin')) not null,
--   unique (user_id, role)
-- );

-- create function public.is_admin()
-- returns boolean as $$
--   select exists (
--     select 1 from user_roles where user_id = auth.uid() and role = 'admin'
--   );
-- $$ language sql security definer;

-- Then you can use is_admin() in your policies, e.g.:
-- create policy "Admins can manage clients" on clients for all using (public.is_admin());
